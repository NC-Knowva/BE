const request = require("supertest");
const app = require("../app");
const seed = require("../db/seeds/seed");
const data = require("../db/data/test-data");
const db = require("../db/connection");

beforeEach(() => seed(data));
afterAll(() => db.end());

describe("ALL /notAPath", () => {
  test("404: Responds with 'Invalid URL' when attempting to access a non-existent endpoint", () => {
    return request(app)
      .get("/notAPath")
      .expect(404)
      .then(({ body }) => {
        expect(body.msg).toBe("Invalid URL");
      });
  });
});

describe("GET /api/users", () => {
  test("200: Responds with all users", () => {
    const expectedUser = {
      username: expect.any(String),
      name: expect.any(String),
      avatar_img_url: expect.any(String),
      education_id: expect.any(String),
      settings: expect.any(Object),
      calendar: expect.any(Object),
      time_stamp: expect.any(String),
    };

    return request(app)
      .get("/api/users")
      .expect(200)
      .then(({ body: { users } }) => {
        expect(users.length).toBe(10);
        users.forEach((user) => {
          expect(user).toMatchObject(expectedUser);
        });
      });
  });
});

describe("GET /api/users/:username", () => {
  test("200: Responds with a user with given username", () => {
    const expectedUser = {
      username: "aclaricoats0",
      name: "Addia Claricoats",
      avatar_img_url:
        "https://robohash.org/verodoloremfuga.png?size=50x50&set=set1",
      education_id: "1",
      settings: expect.any(Object),
      calendar: expect.any(Object),
      time_stamp: expect.any(String),
    };

    return request(app)
      .get("/api/users/aclaricoats0")
      .expect(200)
      .then(({ body: { user } }) => {
        expect(user).toMatchObject(expectedUser);
      });
  });

  test("404: Responds with 'Resource Not Found' when given a valid username that is not in the database", () => {
    return request(app)
      .get("/api/users/aclaricoats")
      .expect(404)
      .then(({ body }) => {
        expect(body.msg).toBe("Resource Not Found");
      });
  });
});

describe("GET /api/games", () => {
  test("200: Responds with a list of all games", () => {
    return request(app)
      .get("/api/games")
      .expect(200)
      .then(({ body }) => {
        expect(body.games).toEqual([
          {
            game_type: "type1",
            game_name: "game 1",
            subject: "one",
            username: "aclaricoats0",
            topic: "topic 1",
            autoGeneratedCode: "879427",
            created_at: "2023-05-01T00:00:00.000Z",
          },
          {
            game_type: "type2",
            game_name: "game 2",
            subject: "two",
            username: "ogladyer1",
            topic: "topic 2",
            autoGeneratedCode: "398247",
            created_at: "2023-05-02T00:00:00.000Z",
          },
        ]);
      });
  });
});

